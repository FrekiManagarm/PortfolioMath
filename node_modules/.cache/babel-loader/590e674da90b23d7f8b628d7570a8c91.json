{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useLayoutEffect, useState } from 'react';\nexport default function useWindowPosition(id, height, elements = 1) {\n  _s();\n\n  const [animation, setAnimation] = useState(false);\n  useLayoutEffect(() => {\n    function updatePosition() {\n      try {\n        const offetSetHeight = window.document.getElementById(id).offsetHeight;\n\n        if (window.pageYOffset > offetSetHeight * elements * height) {\n          setAnimation(true);\n        }\n      } catch (error) {\n        setAnimation(false);\n      }\n    }\n\n    window.addEventListener('scroll', updatePosition);\n    updatePosition();\n    return () => window.removeEventListener('scroll', updatePosition);\n  }, [id, height, elements]);\n  return animation;\n}\n\n_s(useWindowPosition, \"nuWaoAFUqcnv7Yhijhu2/YERFMI=\");","map":{"version":3,"sources":["/Users/mathieuchambaud/Documents/PortfolioMath/src/hooks/useWindowPosition.js"],"names":["useLayoutEffect","useState","useWindowPosition","id","height","elements","animation","setAnimation","updatePosition","offetSetHeight","window","document","getElementById","offsetHeight","pageYOffset","error","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,OAA1C;AAEA,eAAe,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,MAA/B,EAAuCC,QAAQ,GAAG,CAAlD,EAAqD;AAAA;;AAChE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,eAAe,CAAC,MAAM;AAClB,aAASQ,cAAT,GAA0B;AACtB,UAAI;AACA,cAAMC,cAAc,GAAGC,MAAM,CAACC,QAAP,CAAgBC,cAAhB,CAA+BT,EAA/B,EAAmCU,YAA1D;;AACA,YAAIH,MAAM,CAACI,WAAP,GAAqBL,cAAc,GAAGJ,QAAjB,GAA4BD,MAArD,EAA6D;AACzDG,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;AACJ,OALD,CAKE,OAAOQ,KAAP,EAAc;AACZR,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ;;AACDG,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCR,cAAlC;AACAA,IAAAA,cAAc;AACd,WAAO,MAAME,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCT,cAArC,CAAb;AACH,GAdc,EAcZ,CAACL,EAAD,EAAKC,MAAL,EAAaC,QAAb,CAdY,CAAf;AAeA,SAAOC,SAAP;AACH;;GAnBuBJ,iB","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\nexport default function useWindowPosition(id, height, elements = 1) {\n    const [animation, setAnimation] = useState(false);\n\n    useLayoutEffect(() => {\n        function updatePosition() {\n            try {\n                const offetSetHeight = window.document.getElementById(id).offsetHeight;\n                if (window.pageYOffset > offetSetHeight * elements * height) {\n                    setAnimation(true);\n                }\n            } catch (error) {\n                setAnimation(false);\n            }\n        }\n        window.addEventListener('scroll', updatePosition);\n        updatePosition();\n        return () => window.removeEventListener('scroll', updatePosition);\n    }, [id, height, elements]);\n    return animation;\n}"]},"metadata":{},"sourceType":"module"}